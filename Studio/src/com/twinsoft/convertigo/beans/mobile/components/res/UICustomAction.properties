display_name=CustomAction
short_description=Defines a custom action . | Use custom actions in your applications to write your own processing code. You are free code in TypeScript any custom processing \
you want. Be sure to write your TypeScript code between the<br /><code>/*Begin_c8o_function */<br />/*End_c8o_function */</code><br />delimiters.<br /><br />Custom actions can be inserted in an event processing chain, \
combined with any other Actions. For example, you could have a 'Camera' Action called when the user clicks on a button \
an you would like to process this action's output. To do this, place a 'CustomAction' under the camera action. This way, the Custom action will be called <b>after</b> the 'CameraAction' has \
finished (When the user clicks on ok to save the image...).<br /><br />You can pass 'Variables' to custom actions. To do so, simply add 'Variables' object under the 'CustomAction'. You are free to 'source' \
the variable to any fixed text (TX) , TypeScript expression (TS), source (SC) and the value will be transmitted to the CustomAction.<br /><br />You can access the variables value in \
your custom action code by using : <br /><br /> \
<code>vars.myVariableName</code> (where myVariable is the variable name)\
<br /><br /> \
You can call from CustomAction code any additional package available on NPM. To do so, simply configure the 'Application Packages' property with a NPM Package and version number, and  \
configure the 'Page Imports' property to declare all the packages import you will need. This will automatically insert TypeScript 'Import' statements in the page where the CustomAction is used.<br /><br /> \
Some NPM packages may require also additional module declarations. To do so, configure the 'Application Modules' property, the 'Application Provider' property and the 'Application Imports' property. \
This will insert automatically the module \
to the app.module.ts file in the @NgModule 'imports' or 'provider' arrays, and add an 'Import' TypeScript statement in the file header. <br /><br /> \
Some other NPM packages may also require an Additional Cordova plugin. (For example ionic Native packages). You can also declare these plugins in the 'Application Plugin' property. This will cause \
Convertigo Studio to automatically add the plugin to the project's Cordova Config.xml file.<br /><br /> \
CustomActions are also a great way to add some additional NPM packages to your projects, even if you do not write some code in the CustomAction itself, but in any other place (Page class, (TS) mode binding...)
property.actionValue.display_name=Action code
property.actionValue.short_description=Defines the action code. |
property.page_ts_imports.display_name=Page imports
property.page_ts_imports.short_description=Defines the imports needed by this action. | Add here any 'Import' statements your code would require to compile.
property.module_ts_imports.display_name=Application imports
property.module_ts_imports.short_description=Defines the imports needed by this action. | Add here any 'Import' statements needed in the app.module.ts
property.module_ng_imports.display_name=Application modules
property.module_ng_imports.short_description=Defines the modules needed by this action. | Add here any application module to be inserted in the @NgModule({Imports[]}) in app.module.ts
property.module_ng_providers.display_name=Application providers
property.module_ng_providers.short_description=Defines the providers needed by this action. | Add here any application module to be inserted in the @NgModule({Providers[]}) in app.module.ts
property.package_dependencies.display_name=Application packages
property.package_dependencies.short_description=Defines the packages needed by this action. | Add here any NPM Package needed by you code. They will be automatically added to the app's Packages.json
property.cordova_plugins.display_name=Application plugins
property.cordova_plugins.short_description=Defines the plugins needed by this action. | Add here any additional Cordova plugin your code needs (Ex ion native Packages).