display_name=jIterator
short_description=Defines a loop step iterating on list items result from a JavaScript expression. | Also called {{Reference}}For Each{{-Reference}} step, the {{Reference}}jIterator{{-Reference}} step: \
***defines a Javascript expression as input list to work on, i.e. the name of a multi-valued variable, the name of a defined JavaScript array, or the name of a NodeList variable created by a previous {{Reference}}jSource{{-Reference}} step, etc., \
***iterates on each item of the specified input list, \
***contains child steps that are executed on each iteration, as other loop steps (for example see "{{Reference}}Iterator{{-Reference}}", "{{Reference}}jWhile{{-Reference}}" and "{{Reference}}jDoWhile{{-Reference}}" steps documentation and examples).\n\
In the iteration, child steps can access and use: \
***the current iterated item through a JavaScript variable, named {{Computer}}item{{-Computer}} which is filled on each iteration\
***the current loop index through a JavaScript variable, named {{Computer}}index{{-Computer}} which is filled on each iteration.
property.condition.display_name=Max. iterations
property.condition.short_description=Defines the maximum number of iterations. | Intended mostly for testing purposes, this (optional) parameter limits the number of times the iterator loops. \n\
By default, it is not filled, so the {{Reference}}jIterator{{-Reference}} loops on each item from the list.
property.expression.display_name=Expression
property.expression.short_description=Defines the expression evaluated to give the list to iterate on. | This property is a JavaScript expression that is evaluated during the sequence execution and gives a list of items.
property.startIndex.display_name=Start iterate at
property.startIndex.short_description=Defines the starting index value for iterate. |