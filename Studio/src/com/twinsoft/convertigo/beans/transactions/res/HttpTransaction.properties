display_name=HTTP transaction
short_description=Defines an HTTP transaction. | An HTTP transaction is a Convertigo transaction based on HTTP requests. Unlike in XML HTTP transactions, simple HTTP transactions receive regular (not XML-based) HTTP responses.
property.httpVerb.display_name=HTTP verb
property.httpVerb.short_description=Defines the HTTP verb to use for this HTTP request: GET, POST, PUT or DELETE.
property.subDir.display_name=Sub path
property.subDir.short_description=Defines the end of the path for the HTTP connection. | Set here path to the HTTP transaction target web service relative to connector root path.\n\
In the case of HTML transaction, which can also connect automatically to a target web page without using a specific statement (see the {{Produit/Fonction}}Maintain connector state{{-Produit/Fonction}} property), set here relative to the target web page relative to connector root path. \n\
For example, if the target is: {{Computer}}http://server/MyApp/targetpage.jsp{{-Computer}}, the connector server would be: {{Computer}}server{{-Computer}}, the connector root path: {{Computer}}/MyApp{{-Computer}} and the transaction sub path: {{Computer}}/targetpage.jsp{{-Computer}}.
property.handleCookie.display_name=Handles cookies
property.handleCookie.short_description=Defines whether cookies must be handled. |If set to {{Computer}}true{{-Computer}} (default value), the transaction maintains cookies in Convertigo's context. Default value should not be changed unless you specifically want the transaction to ignore cookies while browsing. 
property.httpParameters.display_name=HTTP parameters
property.httpParameters.short_description=Defines HTTP parameters to be sent. | These parameters are HTTP headers sent in the HTTP request to call the target web service method. \n\
In the case of HTML transaction, which can also connect automatically to a target web page without using a specific statement (see the {{Produit/Fonction}}Maintain connector state{{-Produit/Fonction}} property), set here HTTP headers to use for this connection. \n\
For each header:\
***Variable: HTTP header name (ex: {{Computer}}Content-Type{{-Computer}}).\
***Value: HTTP header value (ex: {{Computer}}application/x-www-from-urlencoded{{-Computer}}). 
property.httpVariables.display_name=HTTP variables
property.httpVariables.short_description=Defines conversions between transaction variables and HTTP variables required by the target server. | Transaction input variables. Each input variable has its own set of properties:\
***Variable: Variable name.\
***Description: Variable description.\
***Default value: Variable default value if no input value is sent to the transaction.\
***WSDL: If set to {{Computer}}true{{-Computer}}, includes this variable in the generated SOAP WSDL as an input variable for this method (transaction) of the webservice.\
***Multi: Multi valued variables can be input more than once per request. Also, they are inserted into the transaction as JavaScript arrays, instead of strings.\
***Personalizable: When adding this transaction as a widget in Convertigo Mashup Composer, personalizable variables are added to the widget as user preferences.\
***Cached key: When considering cache usage to serve a request, Convertigo only compares cached key variables between the new request and the cached one to determine whether cache should be used or not.\
***Method: HTTP method to be used for this variable if the transaction connector is to auto-connect (i.e. when {{Produit/Fonction}}Maintain connector state{{-Produit/Fonction}} is false) and if an HTTP variable name is defined for this variable.\
***HTTP variable: If an HTTP variable name is defined, then this variable value is sent as an HTTP variable upon connector auto-connect (see {{Produit/Fonction}}Maintain connector state{{-Produit/Fonction}} parameter).
property.requestTemplate.display_name=Request template
property.requestTemplate.short_description=Defines the request template file URL. | HTTP requests sent by the transaction can contain data. This data is based on a user-defined request template, which can be:\n\
*** an XML file describing the content of the HTTP request to be sent, which includes transaction input variables in the data structure;\
*** or an XSL file that generates the content of the HTTP request to be sent, when a variable-based input XML is transformed using it. 
property.dataEncoding.display_name=HTTP data encoding
property.dataEncoding.short_description=Defines the data encoding scheme to use for the data received from the HTTP connector. | HTTP data can be either string or binary; in case of binary data, they are encoding in Base64.