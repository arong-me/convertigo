display_name=SQL transaction
short_description=Defines an SQL transaction. | An {{Reference}}SQL transaction{{-Reference}} allows Convertigo to execute a request on an SQL database, which is accessed by the parent {{Reference}}SQL connector{{-Reference}}. \n\
An {{Reference}}SQL transaction{{-Reference}} is always associated with an SQL query or several SQL queries defined in the {{Produit/Fonction}}Query{{-Produit/Fonction}} property, that can be dynamically configured with the transaction's variables (see {{Produit/Fonction}}Query{{-Produit/Fonction}} property description and {{Reference}}Variable{{-Reference}} objects documentation). 
property.sqlQuery.display_name=Query
property.sqlQuery.short_description=Defines the SQL query/queries to execute on the target database. | The {{Produit/Fonction}}Query{{-Produit/Fonction}} property allows to define an SQL query or several SQL queries to be executed on the target database. Any SQL query must be written in accordance with the target database tables and available functions and keywords. \n\
Any SQL query can be parameterized with the transaction's variables, to be dynamically configured at runtime with variable values. To use a transaction variable in an SQL query, use one of the following syntaxes in the query: \
***{{Computer}}{variable_name}{{-Computer}}: this simple-brace notation, variable name surrounded by curly braces, protects the SQL query from SQL injections, i.e. the variable content can not contain a piece of SQL query, it will prevent the SQL query execution, but only a value. This notation can only be used inside the {{Computer}}WHERE{{-Computer}} clause, anywhere else you need to use a variable inside the SQL query, you should use the double-brace notation. \
***{{Computer}}{{variable_name}}{{-Computer}}: this double-brace notation, variable name surrounded by double curly braces, does not protect the SQL query from SQL injection, i.e. the variable content can contain a piece of SQL query, it will not prevent the SQL query execution. This may be useful when a whole {{Computer}}WHERE{{-Computer}} clause is computed outside the transaction (at sequence level for example) and passed as a variable to the SQL transaction. It should also be used for the use of variables outside of the {{Computer}}WHERE{{-Computer}} clause. \n\
In the case of multiple SQL queries in this property, they must be separated by semicolons ';'. You can not use the {{Produit/Fonction}}Optional max number of results{{-Produit/Fonction}} property in this case.
property.xmlOutput.display_name=XML output
property.xmlOutput.short_description=Defines how the resulting XML is generated from the SQL query result. | The {{Produit/Fonction}}XML output{{-Produit/Fonction}} property allows to change the structure of the generated XML for the same result data. It can be set to one of the following values: \
***{{Computer}}RAW{{-Computer}}: generates a {{Computer}}row{{-Computer}} element for each table line, containing attributes for selected table columns, named after the column names. \
***{{Computer}}AUTO{{-Computer}}: generates a mix of complex elements and elements with attributes (interesting for multi-table requests). \
***{{Computer}}ELEMENT{{-Computer}}: generates XML elements named after selected table names, containing child XML elements corresponding to columns and named after column names (in case of multi-table requests, one row is a complex element with a depth depending on the number of selected tables). \
***{{Computer}}ELEMENT_WITH_ATTRIBUTES{{-Computer}}: generates a structure similar to the {{Computer}}ELEMENT{{-Computer}} XML output but with {{Computer}}row{{-Computer}} and {{Computer}}column{{-Computer}} tag names, and each element containing a {{Computer}}name{{-Computer}} attribute with the actual name of the selected table or column (useful when table or column names contain symbols not allowed in XML tag names, or start by a number, etc.). \
***{{Computer}}FLAT_ELEMENT{{-Computer}}: generates a structure similar to the {{Computer}}RAW{{-Computer}} XML output, with a {{Computer}}row{{-Computer}} element for each table line, but containing sub-elements for each table column, named after the column names.
property.xmlGrouping.display_name=XML grouping
property.xmlGrouping.short_description=Defines whether the resulting XML should be grouped by elements. | Default value is {{Computer}}false{{-Computer}}. Setting it to {{Computer}}true{{-Computer}} enables the grouping of XML elements in the transaction's response. The behavior can be different depending on the  
property.maxResult.display_name=Optional max number of results
property.maxResult.short_description=Defines the maximum number of results returned by the SQL query. | Setting this property automatically adds a {{Computer}}LIMIT xx{{-Computer}} at the end of the query before its execution on the database. It allows limiting automatically the number of results of every execution of the query. \n\
{{Orange Twinsoft}}Note:{{-Orange Twinsoft}} Beware that this property should be used only when the target SQL database allows the {{Computer}}LIMIT{{-Computer}} keyword in the queries. To know which type of database is accessed by the transaction, refer to the {{Produit/Fonction}}Driver{{-Produit/Fonction}} property of parent {{Reference}}SQL connector{{-Reference}}.
property.autoCommit.display_name=Auto-commit
property.autoCommit.short_description=Defines the commit mode, to be in auto mode or not. | The {{Produit/Fonction}}Auto-commit{{-Produit/Fonction}} property allows to define whether auto commit must be done after executing the query in the SQL database (property set to {{Computer}}true{{-Computer}}, default value), or if the user should program himself his commits to the database (property set to {{Computer}}false{{-Computer}}). \n\
