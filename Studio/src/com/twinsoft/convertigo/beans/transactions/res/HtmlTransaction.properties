display_name=HTML transaction
short_description=Defines an HTML transaction. | As regards Web applications, Convertigo's basic principle is to:\
***navigate through Web screens,\
***detect defined screen classes,\
***extract Web screen data in accordance with screen class-specific extraction rules,\
***treat extracted data in order to generate an XML document structured as required.\n\
This process defines the notion of transaction.\n\
HTML transactions are designed to handle Web page navigation. As other transactions, they are based on input variables, event handlers and associated statements. HTML Transactions return an XML resulting from automated navigation on the target web site and extraction rules data.\n\
Convertigo Web Integrator projects can contain several transactions, each of them being exposed as standard SOAP or REST web services.\n\
Convertigo Web Clipper projects also comprise sets of transactions, each of them being set to open a specific Web page and clip required HTML parts in accordance with defined extraction rules.
property.stateFull.display_name=Maintains connector state
property.stateFull.short_description=Defines whether the connector state must be maintained between transactions. | If set to {{Computer}}false{{-Computer}}, each time the transaction is executed, it connects to the target web page specifed in the Sub path property using the HTTP parameters property for headers, and the Synchronizer property for synchronization.\n\
If set to {{Computer}}true{{-Computer}}, the transaction uses the browser in the state in which it has been left when the preceding transaction ended. 
property.trigger.display_name=Synchronization
property.trigger.short_description=Defines how to synchronize the transaction. | HTML transactions can connect automatically (without using any specific statement) to a target web page (see the {{Produit/Fonction}}Maintain connector state{{-Produit/Fonction}} property). You can specify which type of synchronizer is used in the process.\n\
A synchronizer states how and when accessed pages are considered fully loaded. Only then are data extracted and new pages re-detected. \n\
There are several types of synchronizers, that are described hereafter:\
***{{Computer}}Document completed{{-Computer}}: The synchronizer waits for a number of documents to be completed. Specify here how many "document completed" events Convertigo has to wait for before assuming that the page is complete. \
In many cases, when the target application uses HTTP META redirects or JavaScript redirects, the document is loaded several times. You can monitor \n\
{{Computer}}==== start parse ======{{-Computer}}\n\
and\n\
{{Computer}}==== Parse end ==(XXXms )===================={{-Computer}}\n\
traces in the Engine console (debug mode) to count the number of "document completed" events needed for the synchronizer. \
***{{Computer}}XPath{{-Computer}}: The synchronizer waits until a specified XPath is found. Convertigo tries to evaluate the specified XPath while receiving a Web page or executing JavaScript in it. Once the XPath matches at least one node of the page, the synchronizer returns. \
***{{Computer}}Wait time{{-Computer}}: The synchronizer waits until a specified time is reached (in ms, set via the {{Produit/Fonction}}Timeout{{-Produit/Fonction}} property). \
***{{Computer}}Screen Class{{-Computer}}: The synchronizer waits for one of the selected screen classes to be detected. Several screen classes can be selected to be waited for. The synchronizer returns when one of them is reached. \
***{{Computer}}Download started{{-Computer}}: The synchronizer waits for a download request. This is the perfect synchronizer to use before a {{Produit/Fonction}}Get attachment{{-Produit/Fonction}} statement. \
***{{Computer}}No wait{{-Computer}}: The synchronizer doesn't wait and execution proceeds directly. \n\
For all synchronizer types, the maximum waiting time is set using the {{Produit/Fonction}}Timeout{{-Produit/Fonction}} property.
